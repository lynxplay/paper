From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bjarne Koll <lynxplay101@gmail.com>
Date: Fri, 5 Nov 2021 17:20:50 +0100
Subject: [PATCH] Implement a lists for persistent data containers

Introduces the concepts of lists to the persistent data container and
its persistent data container types. To properly represent lists, two
new list types are introduced, one that is properly typed using the
persistent data type framework and one that remains untyped.

diff --git a/src/main/java/org/bukkit/persistence/PersistentDataType.java b/src/main/java/org/bukkit/persistence/PersistentDataType.java
index b27f4568c21d0f75bc10e76c104c749e81194794..366a50371587e77f482d67b398d7d3d68dbed39c 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataType.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataType.java
@@ -1,5 +1,7 @@
 package org.bukkit.persistence;
 
+import org.bukkit.persistence.list.ListPersistentDataTypeProvider;
+import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
 
 /**
@@ -13,17 +15,17 @@ import org.jetbrains.annotations.NotNull;
  * {@code
  * public class UUIDTagType implements PersistentDataType<byte[], UUID> {
  *
- *         {@literal @Override}
+ *         @Override
  *         public Class<byte[]> getPrimitiveType() {
  *             return byte[].class;
  *         }
  *
- *         {@literal @Override}
+ *         @Override
  *         public Class<UUID> getComplexType() {
  *             return UUID.class;
  *         }
  *
- *         {@literal @Override}
+ *         @Override
  *         public byte[] toPrimitive(UUID complex, PersistentDataAdapterContext context) {
  *             ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
  *             bb.putLong(complex.getMostSignificantBits());
@@ -31,19 +33,23 @@ import org.jetbrains.annotations.NotNull;
  *             return bb.array();
  *         }
  *
- *         {@literal @Override}
+ *         @Override
  *         public UUID fromPrimitive(byte[] primitive, PersistentDataAdapterContext context) {
  *             ByteBuffer bb = ByteBuffer.wrap(primitive);
  *             long firstLong = bb.getLong();
  *             long secondLong = bb.getLong();
  *             return new UUID(firstLong, secondLong);
  *         }
- *     }}</pre>
+ *     }
+ *}</pre>
  *
- * @param <T> the primary object type that is stored in the given tag
- * @param <Z> the retrieved object type when applying this tag type
+ * Any plugin owned implementation of this interface is required to define one of the existing primitive types
+ * found in this interface. Notably {@link #BOOLEAN} is not a primitive type but a convenience type.
+ *
+ * @param <P> the primary object type that is stored in the given tag
+ * @param <C> the retrieved object type when applying this tag type
  */
-public interface PersistentDataType<T, Z> {
+public interface PersistentDataType<P, C> {
 
     /*
         The primitive one value types.
@@ -80,6 +86,10 @@ public interface PersistentDataType<T, Z> {
     /*
         Complex Arrays.
      */
+    /**
+     * @deprecated Use {@link #LIST}'s {@link ListPersistentDataTypeProvider#dataContainers()} instead.
+     */
+    @ApiStatus.Obsolete
     PersistentDataType<PersistentDataContainer[], PersistentDataContainer[]> TAG_CONTAINER_ARRAY = new PrimitivePersistentDataType<>(PersistentDataContainer[].class);
 
     /*
@@ -87,13 +97,22 @@ public interface PersistentDataType<T, Z> {
      */
     PersistentDataType<PersistentDataContainer, PersistentDataContainer> TAG_CONTAINER = new PrimitivePersistentDataType<>(PersistentDataContainer.class);
 
+    /**
+     * A data type provider type that itself cannot be used as a {@link PersistentDataType}.
+     * {@link ListPersistentDataTypeProvider} exposes shared persistent data types for storing lists of other
+     * data types, however.
+     *
+     * @see ListPersistentDataTypeProvider
+     */
+    ListPersistentDataTypeProvider LIST = new ListPersistentDataTypeProvider();
+
     /**
      * Returns the primitive data type of this tag.
      *
      * @return the class
      */
     @NotNull
-    Class<T> getPrimitiveType();
+    Class<P> getPrimitiveType();
 
     /**
      * Returns the complex object type the primitive value resembles.
@@ -101,7 +120,7 @@ public interface PersistentDataType<T, Z> {
      * @return the class type
      */
     @NotNull
-    Class<Z> getComplexType();
+    Class<C> getComplexType();
 
     /**
      * Returns the primitive data that resembles the complex object passed to
@@ -112,17 +131,17 @@ public interface PersistentDataType<T, Z> {
      * @return the primitive value
      */
     @NotNull
-    T toPrimitive(@NotNull Z complex, @NotNull PersistentDataAdapterContext context);
+    P toPrimitive(@NotNull C complex, @NotNull PersistentDataAdapterContext context);
 
     /**
      * Creates a complex object based of the passed primitive value
      *
      * @param primitive the primitive value
-     * @param context the context this operation is running in
+     * @param context   the context this operation is running in
      * @return the complex object instance
      */
     @NotNull
-    Z fromPrimitive(@NotNull T primitive, @NotNull PersistentDataAdapterContext context);
+    C fromPrimitive(@NotNull P primitive, @NotNull PersistentDataAdapterContext context);
 
     /**
      * A default implementation that simply exists to pass on the retrieved or
@@ -131,37 +150,37 @@ public interface PersistentDataType<T, Z> {
      * This implementation does not add any kind of logic, but is used to
      * provide default implementations for the primitive types.
      *
-     * @param <T> the generic type of the primitive objects
+     * @param <P> the generic type of the primitive objects
      */
-    class PrimitivePersistentDataType<T> implements PersistentDataType<T, T> {
+    class PrimitivePersistentDataType<P> implements PersistentDataType<P, P> {
 
-        private final Class<T> primitiveType;
+        private final Class<P> primitiveType;
 
-        PrimitivePersistentDataType(@NotNull Class<T> primitiveType) {
+        PrimitivePersistentDataType(@NotNull final Class<P> primitiveType) {
             this.primitiveType = primitiveType;
         }
 
         @NotNull
         @Override
-        public Class<T> getPrimitiveType() {
+        public Class<P> getPrimitiveType() {
             return primitiveType;
         }
 
         @NotNull
         @Override
-        public Class<T> getComplexType() {
+        public Class<P> getComplexType() {
             return primitiveType;
         }
 
         @NotNull
         @Override
-        public T toPrimitive(@NotNull T complex, @NotNull PersistentDataAdapterContext context) {
+        public P toPrimitive(@NotNull final P complex, @NotNull final PersistentDataAdapterContext context) {
             return complex;
         }
 
         @NotNull
         @Override
-        public T fromPrimitive(@NotNull T primitive, @NotNull PersistentDataAdapterContext context) {
+        public P fromPrimitive(@NotNull final P primitive, @NotNull final PersistentDataAdapterContext context) {
             return primitive;
         }
     }
@@ -187,13 +206,15 @@ public interface PersistentDataType<T, Z> {
 
         @NotNull
         @Override
-        public Byte toPrimitive(@NotNull Boolean complex, @NotNull PersistentDataAdapterContext context) {
+        public Byte toPrimitive(@NotNull final Boolean complex,
+                                @NotNull final PersistentDataAdapterContext context) {
             return (byte) (complex ? 1 : 0);
         }
 
         @NotNull
         @Override
-        public Boolean fromPrimitive(@NotNull Byte primitive, @NotNull PersistentDataAdapterContext context) {
+        public Boolean fromPrimitive(@NotNull final Byte primitive,
+                                     @NotNull final PersistentDataAdapterContext context) {
             return primitive != 0;
         }
     }
diff --git a/src/main/java/org/bukkit/persistence/list/ListPersistentDataType.java b/src/main/java/org/bukkit/persistence/list/ListPersistentDataType.java
new file mode 100644
index 0000000000000000000000000000000000000000..087a34bde5d22b016b390922f4cdeffc9f1d1698
--- /dev/null
+++ b/src/main/java/org/bukkit/persistence/list/ListPersistentDataType.java
@@ -0,0 +1,25 @@
+package org.bukkit.persistence.list;
+
+import java.util.List;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.bukkit.persistence.PersistentDataType;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * The list persistent data represents a data type that is capable of storing a list of other data types in a
+ * {@link PersistentDataContainer}.
+ *
+ * @param <P> the primitive type of the list element.
+ * @param <C> the complex type of the list elements.
+ */
+public interface ListPersistentDataType<P, C> extends PersistentDataType<List<P>, List<C>> {
+
+    /**
+     * Provides the persistent data type of the elements found in the list.
+     *
+     * @return the persistent data type.
+     */
+    @NotNull
+    PersistentDataType<P, C> elementType();
+
+}
diff --git a/src/main/java/org/bukkit/persistence/list/ListPersistentDataTypeProvider.java b/src/main/java/org/bukkit/persistence/list/ListPersistentDataTypeProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..5315dd8fa779d84e072e822ec375c75ce9970e0f
--- /dev/null
+++ b/src/main/java/org/bukkit/persistence/list/ListPersistentDataTypeProvider.java
@@ -0,0 +1,213 @@
+package org.bukkit.persistence.list;
+
+import com.google.common.base.Function;
+import com.google.common.collect.Collections2;
+import com.google.common.collect.Lists;
+import java.util.Collection;
+import java.util.List;
+import org.bukkit.persistence.PersistentDataAdapterContext;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.bukkit.persistence.PersistentDataType;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A statically initialised provider of {@link ListPersistentDataType} instances for all common primitive types
+ * as well as the {@link PersistentDataType#BOOLEAN} type.
+ */
+public class ListPersistentDataTypeProvider {
+    private static final ListPersistentDataType<Byte, Byte> BYTE = new ListPersistentDataTypeImpl<>(PersistentDataType.BYTE);
+    private static final ListPersistentDataType<Short, Short> SHORT = new ListPersistentDataTypeImpl<>(PersistentDataType.SHORT);
+    private static final ListPersistentDataType<Integer, Integer> INTEGER = new ListPersistentDataTypeImpl<>(PersistentDataType.INTEGER);
+    private static final ListPersistentDataType<Long, Long> LONG = new ListPersistentDataTypeImpl<>(PersistentDataType.LONG);
+    private static final ListPersistentDataType<Float, Float> FLOAT = new ListPersistentDataTypeImpl<>(PersistentDataType.FLOAT);
+    private static final ListPersistentDataType<Double, Double> DOUBLE = new ListPersistentDataTypeImpl<>(PersistentDataType.DOUBLE);
+    private static final ListPersistentDataType<Byte, Boolean> BOOLEAN = new ListPersistentDataTypeImpl<>(PersistentDataType.BOOLEAN);
+    private static final ListPersistentDataType<String, String> STRING = new ListPersistentDataTypeImpl<>(PersistentDataType.STRING);
+    private static final ListPersistentDataType<byte[], byte[]> BYTE_ARRAY = new ListPersistentDataTypeImpl<>(PersistentDataType.BYTE_ARRAY);
+    private static final ListPersistentDataType<int[], int[]> INTEGER_ARRAY = new ListPersistentDataTypeImpl<>(PersistentDataType.INTEGER_ARRAY);
+    private static final ListPersistentDataType<long[], long[]> LONG_ARRAY = new ListPersistentDataTypeImpl<>(PersistentDataType.LONG_ARRAY);
+    private static final ListPersistentDataType<PersistentDataContainer, PersistentDataContainer> DATA_CONTAINER = new ListPersistentDataTypeImpl<>(PersistentDataType.TAG_CONTAINER);
+
+    /**
+     * Provides a shared {@link ListPersistentDataType} that is capable of storing lists of bytes.
+     *
+     * @return the persistent data type.
+     */
+    @NotNull
+    public ListPersistentDataType<Byte, Byte> bytes() {
+        return BYTE;
+    }
+
+    /**
+     * Provides a shared {@link ListPersistentDataType} that is capable of storing lists of shorts.
+     *
+     * @return the persistent data type.
+     */
+    @NotNull
+    public ListPersistentDataType<Short, Short> shorts() {
+        return SHORT;
+    }
+
+    /**
+     * Provides a shared {@link ListPersistentDataType} that is capable of storing lists of integers.
+     *
+     * @return the persistent data type.
+     */
+    @NotNull
+    public ListPersistentDataType<Integer, Integer> integers() {
+        return INTEGER;
+    }
+
+    /**
+     * Provides a shared {@link ListPersistentDataType} that is capable of storing lists of longs.
+     *
+     * @return the persistent data type.
+     */
+    @NotNull
+    public ListPersistentDataType<Long, Long> longs() {
+        return LONG;
+    }
+
+    /**
+     * Provides a shared {@link ListPersistentDataType} that is capable of storing lists of floats.
+     *
+     * @return the persistent data type.
+     */
+    @NotNull
+    public ListPersistentDataType<Float, Float> floats() {
+        return FLOAT;
+    }
+
+    /**
+     * Provides a shared {@link ListPersistentDataType} that is capable of storing lists of doubles.
+     *
+     * @return the persistent data type.
+     */
+    @NotNull
+    public ListPersistentDataType<Double, Double> doubles() {
+        return DOUBLE;
+    }
+
+    /**
+     * Provides a shared {@link ListPersistentDataType} that is capable of storing lists of booleans.
+     *
+     * @return the persistent data type.
+     */
+    @NotNull
+    public ListPersistentDataType<Byte, Boolean> booleans() {
+        return BOOLEAN;
+    }
+
+    /**
+     * Provides a shared {@link ListPersistentDataType} that is capable of storing lists of strings.
+     *
+     * @return the persistent data type.
+     */
+    @NotNull
+    public ListPersistentDataType<String, String> strings() {
+        return STRING;
+    }
+
+    /**
+     * Provides a shared {@link ListPersistentDataType} that is capable of storing lists of byte arrays.
+     *
+     * @return the persistent data type.
+     */
+    @NotNull
+    public ListPersistentDataType<byte[], byte[]> byteArrays() {
+        return BYTE_ARRAY;
+    }
+
+    /**
+     * Provides a shared {@link ListPersistentDataType} that is capable of storing lists of int arrays.
+     *
+     * @return the persistent data type.
+     */
+    @NotNull
+    public ListPersistentDataType<int[], int[]> integerArrays() {
+        return INTEGER_ARRAY;
+    }
+
+    /**
+     * Provides a shared {@link ListPersistentDataType} that is capable of storing lists of long arrays.
+     *
+     * @return the persistent data type.
+     */
+    @NotNull
+    public ListPersistentDataType<long[], long[]> longArrays() {
+        return LONG_ARRAY;
+    }
+
+    /**
+     * Provides a shared {@link ListPersistentDataType} that is capable of persistent data containers..
+     *
+     * @return the persistent data type.
+     */
+    @NotNull
+    public ListPersistentDataType<PersistentDataContainer, PersistentDataContainer> dataContainers() {
+        return DATA_CONTAINER;
+    }
+
+    /**
+     * Constructs a new list persistent data type given any persistent data type for its elements.
+     * <p>
+     * The created list persistent data type makes use of
+     * {@link com.google.common.collect.Collections2#transform(Collection, Function)} to transform between the
+     * {@link List} and the primitive list..
+     *
+     * @param elementType the persistent data type that is capable of writing/reading the elements of the list.
+     * @param <P>         the generic type of the primitives stored in the list.
+     * @param <C>         the generic type of the complex values yielded back by the persistent data types.
+     * @return the created list persistent data type.
+     */
+    @NotNull
+    public static <P, C> ListPersistentDataType<P, C> listTypeFrom(@NotNull final PersistentDataType<P, C> elementType) {
+        return new ListPersistentDataTypeImpl<>(elementType);
+    }
+
+    /**
+     * A private implementation of the {@link ListPersistentDataType} that uses
+     * {@link Collections2} for conversion from/to the primitive list.
+     *
+     * @param <P> the generic type of the primitives stored in the list.
+     * @param <C> the generic type of the complex values yielded back by the persistent data types.
+     */
+    private static final class ListPersistentDataTypeImpl<P, C> implements ListPersistentDataType<P, C> {
+        private final @NotNull PersistentDataType<P, C> innerType;
+
+        private ListPersistentDataTypeImpl(@NotNull final PersistentDataType<P, C> innerType) {
+            this.innerType = innerType;
+        }
+
+        @SuppressWarnings("unchecked")
+        @NotNull
+        @Override
+        public Class<List<P>> getPrimitiveType() {
+            return (Class<List<P>>) (Object) List.class;
+        }
+
+        @SuppressWarnings("unchecked")
+        @NotNull
+        @Override
+        public Class<List<C>> getComplexType() {
+            return (Class<List<C>>) (Object) List.class;
+        }
+
+        @Override
+        public @NotNull List<P> toPrimitive(@NotNull final List<C> complex,
+                                                           @NotNull final PersistentDataAdapterContext context) {
+            return Lists.transform(complex, s -> innerType.toPrimitive(s, context));
+        }
+
+        @Override
+        public @NotNull List<C> fromPrimitive(@NotNull final List<P> primitive,
+                                              @NotNull final PersistentDataAdapterContext context) {
+            return Lists.transform(primitive, s -> innerType.fromPrimitive(s, context));
+        }
+
+        @Override
+        public @NotNull PersistentDataType<P, C> elementType() {
+            return this.innerType;
+        }
+    }
+}
