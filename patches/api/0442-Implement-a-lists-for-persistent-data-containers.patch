From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bjarne Koll <lynxplay101@gmail.com>
Date: Fri, 5 Nov 2021 17:20:50 +0100
Subject: [PATCH] Implement a lists for persistent data containers

Introduces the concepts of lists to the persistent data container and
its persistent data container types. To properly represent lists, two
new list types are introduced, one that is properly typed using the
persistent data type framework and one that remains untyped.

diff --git a/src/main/java/org/bukkit/persistence/PersistentDataType.java b/src/main/java/org/bukkit/persistence/PersistentDataType.java
index b27f4568c21d0f75bc10e76c104c749e81194794..fff10681ad262f7249125840136f4e6f153e86c1 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataType.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataType.java
@@ -1,6 +1,7 @@
 package org.bukkit.persistence;
 
 import org.jetbrains.annotations.NotNull;
+import java.util.List;
 
 /**
  * This class represents an enum with a generic content type. It defines the
@@ -87,6 +88,13 @@ public interface PersistentDataType<T, Z> {
      */
     PersistentDataType<PersistentDataContainer, PersistentDataContainer> TAG_CONTAINER = new PrimitivePersistentDataType<>(PersistentDataContainer.class);
 
+    // Paper start - pdc list type
+    /*
+        Lists of persistent data types.
+     */
+    ListPersistentDataTypeFactory LIST = new ListPersistentDataTypeFactory();
+    // Paper end - pdc list type
+
     /**
      * Returns the primitive data type of this tag.
      *
@@ -118,7 +126,7 @@ public interface PersistentDataType<T, Z> {
      * Creates a complex object based of the passed primitive value
      *
      * @param primitive the primitive value
-     * @param context the context this operation is running in
+     * @param context   the context this operation is running in
      * @return the complex object instance
      */
     @NotNull
@@ -197,4 +205,68 @@ public interface PersistentDataType<T, Z> {
             return primitive != 0;
         }
     }
+
+    class ListPersistentDataTypeFactory {
+        private static final ListPersistentDataType<Byte, Byte> BYTE = new ListPersistentDataType<>(PersistentDataType.BYTE);
+        private static final ListPersistentDataType<Short, Short> SHORT = new ListPersistentDataType<>(PersistentDataType.SHORT);
+        private static final ListPersistentDataType<Integer, Integer> INTEGER = new ListPersistentDataType<>(PersistentDataType.INTEGER);
+        private static final ListPersistentDataType<Long, Long> LONG = new ListPersistentDataType<>(PersistentDataType.LONG);
+        private static final ListPersistentDataType<Float, Float> FLOAT = new ListPersistentDataType<>(PersistentDataType.FLOAT);
+        private static final ListPersistentDataType<Double, Double> DOUBLE = new ListPersistentDataType<>(PersistentDataType.DOUBLE);
+        private static final ListPersistentDataType<Byte, Boolean> BOOLEAN = new ListPersistentDataType<>(PersistentDataType.BOOLEAN);
+        private static final ListPersistentDataType<String, String> STRING = new ListPersistentDataType<>(PersistentDataType.STRING);
+        private static final ListPersistentDataType<byte[], byte[]> BYTE_ARRAY = new ListPersistentDataType<>(PersistentDataType.BYTE_ARRAY);
+        private static final ListPersistentDataType<int[], int[]> INTEGER_ARRAY = new ListPersistentDataType<>(PersistentDataType.INTEGER_ARRAY);
+        private static final ListPersistentDataType<long[], long[]> LONG_ARRAY = new ListPersistentDataType<>(PersistentDataType.LONG_ARRAY);
+        private static final ListPersistentDataType<PersistentDataContainer[], PersistentDataContainer[]> TAG_CONTAINER_ARRAY = new ListPersistentDataType<>(PersistentDataType.TAG_CONTAINER_ARRAY);
+        private static final ListPersistentDataType<PersistentDataContainer, PersistentDataContainer> TAG_CONTAINER = new ListPersistentDataType<>(PersistentDataType.TAG_CONTAINER);
+
+        public PersistentDataType<TypedListWrapper<Byte, Byte>, List<Byte>> bytes() {
+            return BYTE;
+        }
+
+        public PersistentDataType<TypedListWrapper<Short, Short>, List<Short>> shorts() {
+            return SHORT;
+        }
+
+        public PersistentDataType<TypedListWrapper<String, String>, List<String>> strings() {
+            return STRING;
+        }
+    }
+
+    record TypedListWrapper<P, C>(
+        List<P> primitiveList,
+        PersistentDataType<P, C> primitiveDataType
+    ) {
+
+    }
+
+    record ListPersistentDataType<P, C>(
+        PersistentDataType<P, C> innerType
+    ) implements PersistentDataType<TypedListWrapper<P, C>, List<C>> {
+
+        @SuppressWarnings("unchecked")
+        @NotNull
+        @Override
+        public Class<TypedListWrapper<P, C>> getPrimitiveType() {
+            return (Class<TypedListWrapper<P, C>>) (Object) TypedListWrapper.class;
+        }
+
+        @SuppressWarnings("unchecked")
+        @NotNull
+        @Override
+        public Class<List<C>> getComplexType() {
+            return (Class<List<C>>) (Object) List.class;
+        }
+
+        @Override
+        public @NotNull TypedListWrapper<P, C> toPrimitive(@NotNull final List<C> complex, @NotNull final PersistentDataAdapterContext context) {
+            return new TypedListWrapper<>(com.google.common.collect.Lists.transform(complex, s -> innerType.toPrimitive(s, context)), this.innerType);
+        }
+
+        @Override
+        public @NotNull List<C> fromPrimitive(@NotNull final TypedListWrapper<P, C> primitive, @NotNull final PersistentDataAdapterContext context) {
+            return com.google.common.collect.Lists.transform(primitive.primitiveList(), s -> innerType.fromPrimitive(s, context));
+        }
+    }
 }
